#ifndef __CCWRAP_ALGORITHM_INCLUDED
#define __CCWRAP_ALGORITHM_INCLUDED

#include <cstddef>

#ifdef __CCWRAP_NATIVE_STL_HEADER_PATH
#include __CCWRAP_NATIVE_STL_HEADER_PATH(algorithm)
#elif defined(__CCWRAP_HAS_INCLUDE_NEXT)
#include_next <algorithm>
#else
#include <../include/algorithm>
#endif

#ifdef __CCWRAP_NO_CXX11_ALGORITHM

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(push)  
# pragma warning(disable:4355)
#endif

#if defined(_MSC_VER) && _MSC_VER == 1600
#else
#include <boost/move/move.hpp>
#endif
#include <boost/algorithm/minmax.hpp>
#include <boost/algorithm/minmax_element.hpp>
#include <boost/algorithm/cxx11/all_of.hpp>
#include <boost/algorithm/cxx11/any_of.hpp>
#include <boost/algorithm/cxx11/none_of.hpp>
#include <boost/algorithm/cxx11/find_if_not.hpp>
#include <boost/algorithm/cxx11/copy_n.hpp>
#include <boost/algorithm/cxx11/copy_if.hpp>
#include <boost/algorithm/cxx11/partition_copy.hpp>
#include <boost/algorithm/cxx11/partition_point.hpp>
#include <boost/algorithm/cxx14/is_permutation.hpp>
//#include <boost/algorithm/cxx14/equal.hpp>
//#include <boost/algorithm/cxx14/mismatch.hpp>

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(pop)
#endif

namespace std {
 #if defined(_MSC_VER) && _MSC_VER == 1600
 #else
	using	::boost::move;
	using	::boost::move_backward;
 #endif

	using	::boost::minmax;
	using	::boost::minmax_element;

	using	::boost::algorithm::all_of;
	using	::boost::algorithm::any_of;
	using	::boost::algorithm::none_of;
	using	::boost::algorithm::find_if_not;
	using	::boost::algorithm::copy_n;
	using	::boost::algorithm::copy_if;
	using	::boost::algorithm::partition_copy;
	using	::boost::algorithm::partition_point;
	using	::boost::algorithm::is_permutation;
	//using	boost::algorithm::equal;
	//using	boost::algorithm::mismatch;
}
#endif

#endif	// __CCWRAP_ALGORITHM_INCLUDED
