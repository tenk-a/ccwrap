// Boost Software Lisence Version 1.0
#ifndef __CCWRAP_ITERATOR_INCLUDED
#define __CCWRAP_ITERATOR_INCLUDED

#include <boost2std_common.hpp>

#include <algorithm>

#if defined(__CCWRAP_HAS_INCLUDE_NEXT)
 #include_next <iterator>
#elif defined(__CCWRAP_NATIVE_STL_HEADER_PATH)
 #include __CCWRAP_NATIVE_STL_HEADER_PATH(iterator)
#else
 #include <../include/iterator>
#endif

#if defined(__CCWRAP_NO_CXX11_ITERATOR) //|| defined(__CCWRAP_LESS_CXX11)
 #if 1
    #include <boost/range/begin.hpp>
    #include <boost/range/end.hpp>
    namespace std {
        using ::boost::begin;
        using ::boost::end;
    }
 #else
    template <class C> constexpr typename C::iterator           begin(C& c) { return c.begin(); }
    template <class C> constexpr typename C::iterator           end(  C& c) { return c.end()  ; }
    template <class C> constexpr typename C::const_iterator     begin(C const& c) { return c.begin(); }
    template <class C> constexpr typename C::const_iterator     end(  C const& c) { return c.end()  ; }
    template <class A, size_t N> constexpr A*                   begin(A (&a)[N]) { return &a[0]; }
    template <class A, size_t N> constexpr A*                   end(  A (&a)[N]) { return &a[N]; }
    template <class A, size_t N> constexpr A const*             begin(A const (&a)[N]) { return &a[0]; }
    template <class A, size_t N> constexpr A const*             end(  A const (&a)[N]) { return &a[N]; }
 #endif

 #if 1
    template <class InpIte>
    constexpr InpIte next(InpIte x, typename std::iterator_traits<InpIte>::difference_type n=1) {
    	advance(x, n);
    	return x;
    }
    
    template <class InpIte>
    constexpr InpIte prev(InpIte x, typename std::iterator_traits<InpIte>::difference_type n=1) {
    	advance(x, -n);
    	return x;
    }
 #else
    #include <boost/next_prior.hpp>
    namespace std {
        using ::boost::next;
        //using ::boost::prev;
    }
 #endif
#endif

#if defined(__CCWRAP_NO_HEADER_CXX14_ITERATOR)
    //#include <boost/range/cbegin.hpp>
    //#include <boost/range/cend.hpp>
    #include <boost/range/rbegin.hpp>
    #include <boost/range/rend.hpp>
    namespace std {
        using ::boost::rbegin;
        using ::boost::rend;
        //using ::boost::range::cbegin;
        //using ::boost::range::cend;
        //using ::boost::range::rcbegin;
        //using ::boost::range::rcend;
        template <class C> constexpr typename C::const_iterator     cbegin(C const& c) { return c.begin(); }
        template <class C> constexpr typename C::const_iterator     cend(  C const& c) { return c.end()  ; }
        //template <class A, size_t N> constexpr A const*           cbegin(A const (&a)[N]) { return &a[0]; }
        //template <class A, size_t N> constexpr A const*           cend(  A const (&a)[N]) { return &a[N]; }
        template <class C> constexpr typename C::const_reverse_iterator  crbegin(C const& c) { return c.rbegin(); }
        template <class C> constexpr typename C::const_reverse_iterator  crend(  C const& c) { return c.rend()  ; }
        //template <class A, size_t N> constexpr reverse_iterator<A const*> crbegin(A const (&a)[N]) { return &a[N]; }
        //template <class A, size_t N> constexpr reverse_iterator<A const*> crend(  A const (&a)[N]) { return &a[0]; }
    }
#endif

#if defined(__CCWRAP_NO_HEADER_CXX17_ITERATOR)
namespace std {
 #if 1
    template <class C> constexpr typename C::pointer        data(C& c) { return &c[0]; }
    template <class A, size_t N> constexpr A*               data(A (&a)[N]) { return &a[0]; }
    template <class C> constexpr typename C::const_pointer  data(C const& c) { return &c[0]; }
    template <class A, size_t N> constexpr A const*         data(A const (&a)[N]) { return &a[0]; }

    template <class C          > constexpr size_t           size(C const& c) { return c.size(); }
    template <class A, size_t N> constexpr size_t           size(A const (&)[N]) { return N; }

    template <class C          > constexpr bool             empty(C const& c) { return c.empty(); }
    template <class A, size_t N> constexpr bool             empty(A const (&)[N]) { return N == 0; }
 #else
    //using ::boost::data;
    //using ::boost::size;
    //using ::boost::empty;
 #endif
}
#endif

#if defined(__CCWRAP_LESS_CXX20)
namespace std {
   //using ::boost::ssize;
    template <class C          > constexpr ptrdiff_t        ssize(C const& c) { return ptrdiff_t(c.size()); }
    template <class A, size_t N> constexpr ptrdiff_t        ssize(A const (&a)[N]) { return ptrdiff_t(N); }
}
#endif

#endif  // __CCWRAP_ITERATOR_INCLUDED
