#ifndef __CCWRAP_ATOMIC_INCLUDED
#define __CCWRAP_ATOMIC_INCLUDED

#include <cstddef>

#if !defined(__CCWRAP_NO_HEADER_ATOMIC)

#ifdef __CCWRAP_NATIVE_STL_HEADER_PATH
#include __CCWRAP_NATIVE_STL_HEADER_PATH(atomic)
#elif defined(__CCWRAP_HAS_INCLUDE_NEXT)
#include_next <atomic>
#else
#include <../include/atomic>
#endif

#else

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(push)  
# pragma warning(disable:4355)
#endif

#include <boost/atomic/atomic.hpp>

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(pop)
#endif

namespace std {
	using ::boost::atomic;

	using ::boost::atomic_char;
	using ::boost::atomic_schar;
	using ::boost::atomic_uchar;
	using ::boost::atomic_short;
	using ::boost::atomic_ushort;
	using ::boost::atomic_int;
	using ::boost::atomic_uint;
	using ::boost::atomic_long;
	using ::boost::atomic_ulong;
	using ::boost::atomic_llong;
	using ::boost::atomic_ullong;

	using ::boost::atomic_bool;
	using ::boost::atomic_wchar_t;
 #ifndef __CCWRAP_NO_CHAR1632_T
	using ::boost::atomic_char16_t;
	using ::boost::atomic_char32_t;
 #endif

	using ::boost::atomic_size_t;
	using ::boost::atomic_ptrdiff_t;
	using ::boost::atomic_intmax_t;
	using ::boost::atomic_uintmax_t;

	using ::boost::atomic_int8_t;
	using ::boost::atomic_uint8_t;
	using ::boost::atomic_int16_t;
	using ::boost::atomic_uint16_t;
	using ::boost::atomic_int32_t;
	using ::boost::atomic_uint32_t;
	using ::boost::atomic_int64_t;
	using ::boost::atomic_uint64_t;
	using ::boost::atomic_intptr_t;
	using ::boost::atomic_uintptr_t;

	using ::boost::atomic_int_least8_t;
	using ::boost::atomic_uint_least8_t;
	using ::boost::atomic_int_least16_t;
	using ::boost::atomic_uint_least16_t;
	using ::boost::atomic_int_least32_t;
	using ::boost::atomic_uint_least32_t;
	using ::boost::atomic_int_least64_t;
	using ::boost::atomic_uint_least64_t;
	using ::boost::atomic_int_fast8_t;
	using ::boost::atomic_uint_fast8_t;
	using ::boost::atomic_int_fast16_t;
	using ::boost::atomic_uint_fast16_t;
	using ::boost::atomic_int_fast32_t;
	using ::boost::atomic_uint_fast32_t;
	using ::boost::atomic_int_fast64_t;
	using ::boost::atomic_uint_fast64_t;
}

#endif

#endif	// __CCWRAP_ATOMIC_INCLUDED
