#ifndef __CCWRAP_FUTURE_INCLUDED
#define __CCWRAP_FUTURE_INCLUDED

#include <cstddef>

#ifndef __CCWRAP_NO_HEADER_FUTURE

#ifdef __CCWRAP_NATIVE_STL_HEADER_PATH
#include __CCWRAP_NATIVE_STL_HEADER_PATH(future)
#elif defined(__CCWRAP_HAS_INCLUDE_NEXT)
#include_next <future>
#else
#include <../include/future>
#endif

#else 

#ifndef BOOST_THREAD_PROVIDES_FUTURE
#define BOOST_THREAD_PROVIDES_FUTURE
#endif

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(push)  
# pragma warning(disable:4355)
#endif

#include <boost/thread/future.hpp>

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(pop)
#endif 

namespace std {
	using ::boost::future_errc;
	using ::boost::launch;
	using ::boost::future_status;
	using ::boost::future_category;
	using ::boost::future_error;
	using ::boost::promise;
	using ::boost::future;	//BOOST_THREAD_FUTURE;
	using ::boost::shared_future;
	using ::boost::packaged_task;
	using ::boost::async;

  #if defined(_MSC_VER) && _MSC_VER == 1600
  #else
	using ::boost::system::is_error_code_enum;
	using ::boost::system::make_error_code;
	using ::boost::system::make_error_condition;
  #endif
}

#endif

#endif	// __CCWRAP_FUTURE_INCLUDED
