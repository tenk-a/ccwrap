#ifndef __CCWRAP_MUTEX_INCLUDED
#define __CCWRAP_MUTEX_INCLUDED

#include <cstddef>

#ifndef __CCWRAP_NO_HEADER_MUTEX

#ifdef __CCWRAP_NATIVE_STL_HEADER_PATH
#include __CCWRAP_NATIVE_STL_HEADER_PATH(mutex)
#elif defined(__CCWRAP_HAS_INCLUDE_NEXT)
#include_next <mutex>
#else
#include <../include/mutex>
#endif

#else 

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(push)  
# pragma warning(disable:4355)
#endif

#include <boost/thread/mutex.hpp>
#include <boost/thread/recursive_mutex.hpp>
#include <boost/thread/once.hpp>

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(pop)
#endif 

namespace std {
	using ::boost::mutex;
	using ::boost::recursive_mutex;
	using ::boost::timed_mutex;
	using ::boost::recursive_timed_mutex;

	using ::boost::defer_lock;
	using ::boost::try_to_lock;
	using ::boost::adopt_lock;
	using ::boost::lock_guard;
	using ::boost::unique_lock;
	using ::boost::try_lock;
	using ::boost::lock;
	using ::boost::once_flag;
	using ::boost::call_once;
}

#endif

#endif	// __CCWRAP_MUTEX_INCLUDED
