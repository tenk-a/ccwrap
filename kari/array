/**
 *  @file   array
 *  @author Masashi Kitamura (tenka@6809.net)
 *  @date   2003-07-19 , 2010, 2019
 */
#ifndef STD_ARRAY_INCLUDED
#define STD_ARRAY_INCLUDED

#include <ccwrap_header.h>
#include <cstddef>
#include <cassert>
#include <iterator>
#include <algorithm>
#include <stdexcept>

namespace std {

template<class T, std::size_t N>
class array {
    T       ary_[N];
public:
    typedef std::size_t                           size_type;
    typedef std::ptrdiff_t                        difference_type;
    typedef T&                                    reference;
    typedef const T&                              const_reference;
    typedef T                                     value_type;
    typedef T*                                    iterator;
    typedef const T*                              const_iterator;
    typedef std::reverse_iterator<iterator>       reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    //array() { std::fill_n(begin(),size(),T()); }
    //array(const array& r) { std::copy(r.begin(), r.end(), begin()); }
    size_type       size()          const   { return N; }
    size_type       max_size()      const   { return N; }
    size_type       capacity()      const   { return N; }
    bool            empty()         const   { return N == 0; }

    iterator        begin()                 { return ary_; }
    const_iterator  begin()         const   { return ary_; }
    const_iterator  cbegin()        const   { return ary_; }
    iterator        end()                   { return ary_ + N; }
    const_iterator  end()           const   { return ary_ + N; }
    const_iterator  cend()          const   { return ary_ + N; }
    reverse_iterator       rbegin()         { return reverse_iterator(ary_ + N); }
    const_reverse_iterator rbegin() const   { return const_reverse_iterator(ary_ + N); }
    const_reverse_iterator crbegin() const  { return const_reverse_iterator(ary_ + N); }
    reverse_iterator       rend()           { return reverse_iterator(ary_); }
    const_reverse_iterator rend()   const   { return const_reverse_iterator(ary_); }
    const_reverse_iterator crend()  const   { return const_reverse_iterator(ary_); }

    reference       front()                 { return *ary_; }
    const_reference front()         const   { return *ary_; }
    reference       back()                  { return *(ary_ + N - 1); }
    const_reference back()          const   { return *(ary_ + N - 1); }
    reference       at(size_type n)         { chkOutOfRng(n); return *(ary_ + n); }
    const_reference at(size_type n) const   { chkOutOfRng(n); return *(ary_ + n); }
    reference       operator[](size_type n)       { assert(n < N ); return *(ary_ + n); }
    const_reference operator[](size_type n) const { assert(n < N ); return *(ary_ + n); }

    void swap(array& x)                       { for (size_type i = 0; i < N; i++) std::swap(ary_[i], x[i]); }
    void assign(size_type sz, const T& t=T()) { assert(sz <= N); std::fill_n(begin(), sz, t); }

    bool operator==(const array& r) const { return std::equal(begin(), end(), r.begin()); }
    bool operator!=(const array& r) const { return !(*this == r); }
    bool operator< (const array& r) const { return std::lexicographical_compare(begin(),end(),r.begin(),r.end()); }
    bool operator>=(const array& r) const { return  !(*this < r); }
    bool operator> (const array& r) const { return    r < *this ; }
    bool operator<=(const array& r) const { return ! (r < *this); }

    template <typename T2>
    array<T,N>& operator= (const array<T2,N>& r) { std::copy(r.begin(),r.end(), begin()); return *this; }
    template<typename I>
    void assign(I b, I e) { size_type l = std::distance(b,e); assert(l <= N); std::copy(b,e,begin()); }

private:
    //void chkOutOfRng(size_type n) const { assert(n < N && "invalid array<T,N> subscript\n"); }
    void chkOutOfRng(size_type n) const { if (n >= N) throw std::out_of_range("invalid array<T,N> subscript"); }
};

} // namespace std
#endif
