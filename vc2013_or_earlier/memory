#ifndef CCWRAP_MEMORY_INCLUDED
#define CCWRAP_MEMORY_INCLUDED

#include <cstddef>

#ifndef __CCWRAP_STD
 #define __CCWRAP_STD    std
#endif

#ifdef __CCWRAP_NATIVE_STL_HEADER_PATH
#include __CCWRAP_NATIVE_STL_HEADER_PATH(memory)
#elif defined(__CCWRAP_HAS_INCLUDE_NEXT)
#include_next <memory>
#else
#include <../include/memory>
#endif

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(push)
# pragma warning(disable:4355)
#endif

#if defined(__CCWRAP_NO_CXX11_MEMORY)

#ifdef __CCWRAP_NATIVE_STL_HEADER_PATH
#include __CCWRAP_NATIVE_STL_HEADER_PATH(iterator)
#elif defined(__CCWRAP_HAS_INCLUDE_NEXT)
#include_next <iterator>
#else
#include <../include/iterator>
#endif

#include "../_ccwrap/unique_ptr_cxx03.hpp"

namespace std {
    template <class InpIte, class Size, class FwdIte>
    FwdIte  uninitialized_copy_n(InpIte first, Size n, FwdIte result) {
        for ( ; n > 0; ++result, ++first, --n) {
          ::new (static_cast<void*>(&*result)) typename iterator_traits<FwdIte>::value_type(*first);
        }
    }
}

#endif  // __CCWRAP_NO_CXX11_MEMORY

#if defined(_MSC_VER) && _MSC_VER >= 1400
# pragma warning(pop)
#endif

#endif  // CCWRAP_MEMORY_INCLUDED
